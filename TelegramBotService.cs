using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Polling;
using Telegram.Bot.Types.ReplyMarkups;
using PuppeteerSharp;
using Newtonsoft.Json.Linq;
using System.Text;
using System.IO;

namespace TelegramBot
{
    public class TelegramBotService
    {
        private readonly ITelegramBotClient _botClient;
        private readonly string _weatherApiKey;
        private IBrowser? _browser;
        private ReplyKeyboardMarkup _mainMenu;

        public TelegramBotService(string botToken, string weatherApiKey)
        {
            _botClient = new TelegramBotClient(botToken);
            _weatherApiKey = weatherApiKey;

            // Initialize main menu
            _mainMenu = new ReplyKeyboardMarkup(new[]
            {
                new[]
                {
                    new KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"),
                    new KeyboardButton("üîç –ü–æ–∏—Å–∫")
                },
                new[]
                {
                    new KeyboardButton("‚è∞ –í—Ä–µ–º—è"),
                    new KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
                },
                new[]
                {
                    new KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                }
            })
            {
                ResizeKeyboard = true
            };
        }

        private async Task InitializeBrowser()
        {
            try
            {
                var browserFetcher = new BrowserFetcher(new BrowserFetcherOptions
                {
                    Path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, ".local-browser")
                });

                await browserFetcher.DownloadAsync();
                _browser = await Puppeteer.LaunchAsync(new LaunchOptions
                {
                    Headless = true,
                    Args = new[] { 
                        "--no-sandbox", 
                        "--disable-setuid-sandbox",
                        "--disable-dev-shm-usage",
                        "--disable-gpu"
                    }
                });

                Console.WriteLine("Browser initialized successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to initialize browser: {ex.Message}");
                _browser = null;
            }
        }

        public async Task StartBot()
        {
            try
            {
                // Initialize browser in background
                _ = InitializeBrowser();

                var me = await _botClient.GetMeAsync();
                Console.WriteLine($"Hello, I am user {me.Id} and my name is {me.FirstName}.");

                using var cts = new CancellationTokenSource();

                var receiverOptions = new ReceiverOptions
                {
                    AllowedUpdates = Array.Empty<UpdateType>()
                };

                _botClient.StartReceiving(
                    updateHandler: HandleUpdateAsync,
                    pollingErrorHandler: HandlePollingErrorAsync,
                    receiverOptions: receiverOptions,
                    cancellationToken: cts.Token
                );

                Console.WriteLine($"Start listening for @{me.Username}");

                // Instead of waiting for a key press, wait indefinitely
                await Task.Delay(Timeout.Infinite, cts.Token);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error starting bot: {ex.Message}");
                throw;
            }
        }

        private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            if (update.Message is not { Text: { } messageText } message)
                return;

            var chatId = message.Chat.Id;

            try 
            {
                // Ignore empty messages
                if (string.IsNullOrWhiteSpace(messageText))
                    return;

                // Handle commands and menu buttons
                switch (messageText)
                {
                    case "/start":
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç.\n\n" +
                                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.\n" +
                                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n" +
                                 "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ö–∏—Ä–∏–ª–ª –õ—É–∫—å—è–Ω–æ–≤",
                            replyMarkup: _mainMenu,
                            cancellationToken: cancellationToken);
                        break;

                    case "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
                    case "/restart":
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...",
                            cancellationToken: cancellationToken);
                            
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                        if (_browser != null)
                        {
                            await _browser.CloseAsync();
                            await _browser.DisposeAsync();
                            _browser = null;
                        }
                        await InitializeBrowser();
                        
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ë–æ—Ç —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
                            replyMarkup: _mainMenu,
                            cancellationToken: cancellationToken);
                        break;

                    case "üå§ –ü–æ–≥–æ–¥–∞":
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/weather –ú–æ—Å–∫–≤–∞",
                            cancellationToken: cancellationToken);
                        break;

                    case "üîç –ü–æ–∏—Å–∫":
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç!",
                            cancellationToken: cancellationToken);
                        break;

                    case "‚è∞ –í—Ä–µ–º—è":
                        await SendCurrentTime(chatId, cancellationToken);
                        break;

                    case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
                        await SendHelpMessage(chatId, cancellationToken);
                        break;

                    default:
                        // Handle specific commands
                        if (messageText.StartsWith("/"))
                        {
                            if (messageText.StartsWith("/weather"))
                            {
                                var parts = messageText.Split(' ', 2);
                                if (parts.Length < 2)
                                {
                                    await _botClient.SendTextMessageAsync(
                                        chatId: chatId,
                                        text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞",
                                        cancellationToken: cancellationToken);
                                    return;
                                }
                                await SendWeatherInfo(chatId, parts[1], cancellationToken);
                            }
                            else if (messageText == "/time")
                            {
                                await SendCurrentTime(chatId, cancellationToken);
                            }
                            else if (messageText == "/help")
                            {
                                await SendHelpMessage(chatId, cancellationToken);
                            }
                        }
                        // Handle any other text as a search query
                        else
                        {
                            await SearchWeb(chatId, messageText, cancellationToken);
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex.Message}",
                    cancellationToken: cancellationToken);
            }
        }

        private Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            Console.WriteLine($"Error occurred: {exception.Message}");
            return Task.CompletedTask;
        }

        private string GetFunnyErrorMessage()
        {
            var funnyMessages = new[]
            {
                "üå™ –û–π! –ö–∞–∂–µ—Ç—Å—è, –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥ –∑–∞—Å–Ω—É–ª –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±—É–¥–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑!",
                "üå° –ì—Ä–∞–¥—É—Å–Ω–∏–∫ —Å–ª–æ–º–∞–ª—Å—è, —Ç–µ—Ä–º–æ–º–µ—Ç—Ä —É–±–µ–∂–∞–ª, –±–∞—Ä–æ–º–µ—Ç—Ä –≤–∑—è–ª –≤—ã—Ö–æ–¥–Ω–æ–π... –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?",
                "‚òî –ù–∞—à —Å–∏–Ω–æ–ø—Ç–∏–∫ –∑–∞—Å—Ç—Ä—è–ª –ø–æ–¥ –¥–æ–∂–¥–µ–º –±–µ–∑ –∑–æ–Ω—Ç–∞. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –∏ –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç!",
                "üåà –†–∞–¥—É–≥–∞ —É–∫—Ä–∞–ª–∞ –≤—Å–µ –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –∏—Ö –≤–µ—Ä–Ω–µ–º!",
                "üåû –°–æ–ª–Ω—Ü–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å. –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —É—Å—Ç–∞–ª–æ —Å–≤–µ—Ç–∏—Ç—å...",
                "üåô –õ—É–Ω–∞ —Å–µ–π—á–∞—Å –∑–∞–º–µ–Ω—è–µ—Ç —Å–æ–ª–Ω—Ü–µ –Ω–∞ —Å–º–µ–Ω–µ, –Ω–æ –æ–Ω–∞ –µ—â–µ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞—Å—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º",
                "‚õà –ì—Ä–æ–∑–∞ –ø–æ–≤—Ä–µ–¥–∏–ª–∞ –Ω–∞—à–∏ –º–µ—Ç–µ–æ—Å–ø—É—Ç–Ω–∏–∫–∏! –ù–æ –Ω–∞—à–∏ –∫–æ—Å–º–æ–Ω–∞–≤—Ç—ã —É–∂–µ —á–∏–Ω—è—Ç –∏—Ö",
                "üå§ –û–±–ª–∞–∫–∞ —É—Å—Ç—Ä–æ–∏–ª–∏ –∑–∞–±–∞—Å—Ç–æ–≤–∫—É –∏ –æ—Ç–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–≤–∏–≥–∞—Ç—å—Å—è. –í–µ–¥–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã...",
                "‚ùÑ –°–Ω–µ–∂–∏–Ω–∫–∏ –∑–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ –ø—Ä–æ–≤–æ–¥–∞—Ö –∏ –º–µ—à–∞—é—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–≤–æ—Ä–Ω–∏–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å!",
                "üå™ –¢–æ—Ä–Ω–∞–¥–æ —É–Ω–µ—Å –≤—Å–µ –Ω–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–≥–æ–¥–µ! –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–≥–Ω–∞—Ç—å –∏—Ö..."
            };

            var random = new Random();
            return funnyMessages[random.Next(funnyMessages.Length)];
        }

        private string GetFunnyNotFoundMessage(string city)
        {
            var funnyMessages = new[]
            {
                $"üó∫ –•–º–º... {city}? –ú–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ —Å–ø—Ä—è—Ç–∞–ª—Å—è –∑–∞ –æ–±–ª–∞–∫–∞–º–∏? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!",
                $"üåç –û–π-–æ–π! –ö–∞–∂–µ—Ç—Å—è, {city} –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞–ª –≤ –¥—Ä—É–≥—É—é –≥–∞–ª–∞–∫—Ç–∏—é. –ú–æ–∂–µ—Ç, –æ–ø–µ—á–∞—Ç–∫–∞?",
                $"üß≠ –ù–∞—à –∫–æ–º–ø–∞—Å –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ {city}. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –ø–æ—Ö–∏—Ç–∏–ª–∏ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ?",
                $"üéØ {city} –∏–≥—Ä–∞–µ—Ç —Å –Ω–∞–º–∏ –≤ –ø—Ä—è—Ç–∫–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                $"üîç –ù–∞—à –≥–µ–æ–≥—Ä–∞—Ñ –≤ –æ—Ç–ø—É—Å–∫–µ –∏ –∑–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å {city} –Ω–∞ –∫–∞—Ä—Ç–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥?",
                $"üìç {city}? –•–º... –ú–æ–∂–µ—Ç –±—ã—Ç—å, —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–ª—Å—è? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ!",
                $"üåè –û –Ω–µ—Ç! {city} –≤—Ä–µ–º–µ–Ω–Ω–æ —É—à–µ–ª –≥—É–ª—è—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                $"üóø –ê—Ä—Ö–µ–æ–ª–æ–≥–∏ –≤—Å–µ –µ—â–µ –∏—â—É—Ç –¥—Ä–µ–≤–Ω–∏–π –≥–æ—Ä–æ–¥ {city}. –ü–æ–∫–∞ –ø–æ–∏—â–µ–º –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ?",
                $"üé™ {city} —É–µ—Ö–∞–ª —Å —Ü–∏—Ä–∫–æ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å –ª–∏ –≤—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏",
                $"üåà {city} –≥–¥–µ-—Ç–æ –∑–∞ —Ä–∞–¥—É–≥–æ–π... –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –µ–≥–æ –ø–æ–¥ –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º?"
            };

            var random = new Random();
            return funnyMessages[random.Next(funnyMessages.Length)];
        }

        private async Task SendWeatherInfo(long chatId, string city, CancellationToken cancellationToken)
        {
            try
            {
                using var client = new HttpClient();
                var url = $"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={_weatherApiKey}&units=metric&lang=ru";
                
                HttpResponseMessage response;
                try
                {
                    response = await client.GetAsync(url);
                }
                catch
                {
                    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∑–∞–±–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    var funnyMessage = GetFunnyErrorMessage();
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: funnyMessage + "\n\n(–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É)",
                        cancellationToken: cancellationToken);
                    return;
                }

                // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
                if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    var funnyMessage = GetFunnyNotFoundMessage(city);
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: funnyMessage,
                        cancellationToken: cancellationToken);
                    return;
                }

                // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                if (!response.IsSuccessStatusCode)
                {
                    var funnyMessage = GetFunnyErrorMessage();
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: funnyMessage + "\n\n(–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É)",
                        cancellationToken: cancellationToken);
                    return;
                }

                // –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –ø–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
                var responseContent = await response.Content.ReadAsStringAsync();
                var json = JObject.Parse(responseContent);

                var temp = json["main"]?["temp"]?.Value<double>() ?? 0;
                var description = json["weather"]?[0]?["description"]?.Value<string>() ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                var humidity = json["main"]?["humidity"]?.Value<int>() ?? 0;

                var weatherInfo = $"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n" +
                                $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n" +
                                $"–£—Å–ª–æ–≤–∏—è: {description}\n" +
                                $"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%";

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: weatherInfo,
                    cancellationToken: cancellationToken);
            }
            catch (Exception)
            {
                // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                var funnyMessage = GetFunnyErrorMessage();
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: funnyMessage + "\n\n(–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É)",
                    cancellationToken: cancellationToken);
            }
        }

        private async Task SearchWeb(long chatId, string query, CancellationToken cancellationToken)
        {
            if (_browser == null)
            {
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    cancellationToken: cancellationToken);

                // Try to initialize browser again
                await InitializeBrowser();
                return;
            }

            try
            {
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "üîç –ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
                    cancellationToken: cancellationToken);

                using var page = await _browser.NewPageAsync();
                
                // Configure page settings
                await page.SetUserAgentAsync("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
                await page.SetRequestInterceptionAsync(true);

                page.Request += (sender, e) =>
                {
                    if (e.Request.ResourceType == ResourceType.Image || 
                        e.Request.ResourceType == ResourceType.StyleSheet || 
                        e.Request.ResourceType == ResourceType.Font)
                    {
                        e.Request.AbortAsync();
                    }
                    else
                    {
                        e.Request.ContinueAsync();
                    }
                };
                
                // Navigate with increased timeout
                var navigationOptions = new NavigationOptions 
                { 
                    WaitUntil = new[] { WaitUntilNavigation.DOMContentLoaded },
                    Timeout = 60000 // 60 seconds
                };
                
                await page.GoToAsync($"https://www.google.com/search?q={Uri.EscapeDataString(query)}", navigationOptions);

                // Wait for search results with increased timeout
                var waitOptions = new WaitForSelectorOptions { Timeout = 60000 };
                await page.WaitForSelectorAsync("div.g", waitOptions);
                
                var searchResults = await page.EvaluateFunctionAsync<string>(@"() => {
                    const results = Array.from(document.querySelectorAll('.g'));
                    return results.slice(0, 3).map(result => {
                        const title = result.querySelector('h3')?.textContent || '';
                        const link = result.querySelector('a')?.href || '';
                        const snippet = result.querySelector('.VwiC3b')?.textContent || '';
                        return `üìå *${title}*\n${snippet}\n${link}\n`;
                    }).join('\n');
                }");

                if (string.IsNullOrEmpty(searchResults))
                {
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                        cancellationToken: cancellationToken);
                    return;
                }

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\":\n\n{searchResults}",
                    parseMode: ParseMode.Markdown,
                    disableWebPagePreview: true,
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Search error: {ex.Message}");
                string errorMessage = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. ";
                
                if (ex.Message.Contains("Timeout"))
                {
                    errorMessage += "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å.";
                }
                else
                {
                    errorMessage += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                }

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: errorMessage,
                    cancellationToken: cancellationToken);

                // Try to reinitialize browser on error
                try
                {
                    if (_browser != null)
                    {
                        await _browser.CloseAsync();
                        await _browser.DisposeAsync();
                    }
                }
                catch
                {
                    // Ignore cleanup errors
                }
                
                _browser = null;
                _ = InitializeBrowser();
            }
        }

        private async Task SendCurrentTime(long chatId, CancellationToken cancellationToken)
        {
            var currentTime = DateTime.Now.ToString("HH:mm:ss");
            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: $"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {currentTime}",
                cancellationToken: cancellationToken);
        }

        private async Task SendHelpMessage(long chatId, CancellationToken cancellationToken)
        {
            var helpMessage = @"üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

üå§ */weather* [–≥–æ—Ä–æ–¥] - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ
–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞

‚è∞ */time* - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

‚ÑπÔ∏è */help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° *–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç!

üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start";

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: helpMessage,
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken);
        }
    }
}
